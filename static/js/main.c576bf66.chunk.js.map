{"version":3,"sources":["api/api.js","api/posts.js","components/Post/Post.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/CommentsList/CommentsList.jsx","components/PostDetails/PostDetails.jsx","api/users.js","components/UserSelect/UserSelect.jsx","App.jsx","index.js"],"names":["request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","data","getUserPosts","userId","posts","filter","post","getPostDetails","postId","postDetails","Post","title","id","selectedPostId","selectPostId","className","onClick","type","cn","PostsList","selectedUserId","useState","setPosts","useEffect","loadPosts","postsFromServer","map","key","getPostComments","comments","comment","body","postComment","name","email","method","headers","JSON","stringify","deleteComment","commentId","NewCommentForm","updateComments","setName","setEmail","setBody","handleSubmit","event","preventDefault","includes","onSubmit","placeholder","value","onChange","target","CommentsList","handleDelete","PostDetails","setPostDetails","setComments","isCommentsShown","toggleCommentsVisibility","loadPostDetails","loadComments","postDetailsFromServer","commentsFromServer","length","button","getUsers","users","UserSelect","changeHandler","selectedUser","setUsers","loadUsers","usersFromServer","slice","user","App","setSelectedUserId","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c576bf66.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, options) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return result.data;\n};\n\nexport const post = (url, data) => request(\n  url,\n  {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  },\n);\n\nexport const remove = url => request(\n  url,\n  {\n    method: 'DELETE',\n  },\n);\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  return (\n    userId\n      ? posts.filter(post => post.userId === userId)\n      : posts\n  );\n};\n\nexport const getPostDetails = async(postId) => {\n  const postDetails = await request(`/posts/${postId}`);\n\n  return postDetails;\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Post = ({ userId, title, id, selectedPostId, selectPostId }) => (\n  <li className=\"PostsList__item\">\n    <div>\n      <b>\n        [User #\n        {userId}\n        ]:\n        {' '}\n      </b>\n      {title}\n    </div>\n    <button\n      onClick={() => selectPostId(id)}\n      type=\"button\"\n      className={cn('PostsList__button button', {\n        'button--is-active': id === selectedPostId,\n      })}\n    >\n      {id === selectedPostId ? 'Close' : 'Open'}\n    </button>\n  </li>\n);\n\nPost.propTypes = {\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  selectPostId: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../Post';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUserId, selectPostId, selectedPostId }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  const loadPosts = async() => {\n    const postsFromServer = await getUserPosts(selectedUserId);\n\n    setPosts(postsFromServer);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <Post\n            key={post.id}\n            {...post}\n            selectedPostId={selectedPostId}\n            selectPostId={selectPostId}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  selectPostId: PropTypes.func.isRequired,\n};\n","import { post, remove, request } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  return comments.filter(comment => comment.postId === postId && comment.body);\n};\n\nexport const postComment = async(\n  postId,\n  name,\n  email,\n  body,\n) => post('/comments', {\n  postId,\n  name,\n  email,\n  body,\n});\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (!name || !email.includes('@') || !body) {\n      return;\n    }\n\n    await postComment(postId, name, email, body);\n    updateComments();\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from '../../api/comments';\n\nexport const CommentsList = ({ comments, updateComments }) => {\n  const handleDelete = async(commentId) => {\n    await deleteComment(commentId);\n    updateComments();\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li className=\"PostDetails__list-item\" key={comment.id}>\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => handleDelete(comment.id)}\n          >\n            X\n          </button>\n          <p>\n            {comment.body}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { CommentsList } from '../CommentsList';\nimport { getPostDetails } from '../../api/posts';\nimport './PostDetails.scss';\nimport { getPostComments } from '../../api/comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isCommentsShown, toggleCommentsVisibility] = useState(false);\n\n  useEffect(() => {\n    loadPostDetails();\n    loadComments();\n  }, [selectedPostId]);\n\n  const loadPostDetails = async() => {\n    const postDetailsFromServer = await getPostDetails(selectedPostId);\n\n    setPostDetails(postDetailsFromServer);\n  };\n\n  const loadComments = async() => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    setComments(commentsFromServer);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length\n          ? (\n            <button\n              type=\"button\"\n              className={cn({\n                button: true,\n                'PostDetails__remove-button': isCommentsShown,\n              })}\n              onClick={() => toggleCommentsVisibility(!isCommentsShown)}\n            >\n              {`${isCommentsShown\n                ? 'Hide'\n                : 'Show'} ${comments.length} comments`}\n            </button>\n          )\n          : (<p>No comments here yet</p>)\n        }\n\n        {isCommentsShown && (\n          <CommentsList comments={comments} updateComments={loadComments} />\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            updateComments={loadComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUsers = async(userId) => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ changeHandler, selectedUser }) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async() => {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer.slice(0, 9));\n  };\n\n  return (\n    <header className=\"App__header\">\n      <label>\n        Select a user: &nbsp;\n        <select\n          value={selectedUser}\n          onChange={changeHandler}\n          className=\"App__user-selector\"\n        >\n          <option value=\"0\">All users</option>\n          {users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n      </label>\n    </header>\n  );\n};\n\nUserSelect.propTypes = {\n  changeHandler: PropTypes.func.isRequired,\n  selectedUser: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handleUserSelect = (event) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const handlePostId = (postId) => {\n    setSelectedPostId(postId === selectedPostId ? 0 : postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <UserSelect\n        changeHandler={handleUserSelect}\n        selectedUser={selectedUserId}\n      />\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectPostId={handlePostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          {!!selectedPostId && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}